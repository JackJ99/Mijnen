Object subclass: #Mijnen	instanceVariableNames: 'speelmoment speler scherm bord nivos huidigeNivo maximaleNivo ronde spelduur aantalZetten punten levens'	classVariableNames: ''	package: 'Mijnen'!!Mijnen commentStamp: 'JackJanssen 3/17/2024 15:48' prior: 0!Mijnen is een bordspel voor 1 speler. Het wordt gespeeld in 1 of meer Spelrondes, voor zover de speler in leven blijftVerantwoordelijk voor:- vragen van de naam en maken van de Speler- maken van het Bord- kiezen van het Niveau- Starten van een Spelronde!!Mijnen methodsFor: 'action' stamp: 'JackJanssen 3/19/2024 16:38'!beeindigRonde	"Zorgt dat het bord de inhoud van alle vakken toont en dat de ronde wordt beëindigd. Daarbij worden de resultaten van de rond ontvangen en deze worden vastgelegd. Vervolgens worden die resultaten ook getoond op het scherm."	| r |	bord toonAlleVakken .	r := ronde beeindigRonde .	spelduur := spelduur + (r spelduur).	aantalZetten := aantalZetten + (r aantalZetten).	punten := punten + (r puntenwinst ).	levens := (r aantalLevens ).	self eindeRonde: r.	! !!Mijnen methodsFor: 'action' stamp: 'JackJanssen 3/19/2024 16:51'!speelNieuweRonde	"Voert de initiële acties uit voor het spelen van een nieuwe spelronde: het bord wordt geïnitialiseerd, er wordt een spelronde gestart voor het huidige nivo en op het scherm worden de toegestane richtingen voor de eerste zet ingesteld"		bord initialiseer: (nivos at: huidigeNivo) .	ronde nieuwNivo: (nivos at: huidigeNivo) metLevens:  levens.	scherm stelRichtingenIn: (bord toegestaneRichtingen ).! !!Mijnen methodsFor: 'event handling' stamp: 'JackJanssen 3/19/2024 16:58'!zetLinks 	"Laat het bord een zet naar links doen en handelt vervolgens het resultaat van die zet af"	| v r |	v := Verplaatsingsrichting uniqueInstance .	r := bord doeZet: (v links).	self  handelResulaatAf: r.	! !!Mijnen methodsFor: 'event handling' stamp: 'JackJanssen 3/19/2024 16:59'!zetOmhoog 	"Laat het bord een zet naar omhoog doen en handelt vervolgens het resultaat van die zet af"	| v r |	v := Verplaatsingsrichting uniqueInstance .	r := bord doeZet: (v op).	self  handelResulaatAf: r.! !!Mijnen methodsFor: 'event handling' stamp: 'JackJanssen 3/19/2024 16:59'!zetOmlaag 	"Laat het bord een zet naar omlaag doen en handelt vervolgens het resultaat van die zet af"	| v r|	v := Verplaatsingsrichting uniqueInstance .	r:= bord doeZet: (v neer).	self  handelResulaatAf: r.! !!Mijnen methodsFor: 'event handling' stamp: 'JackJanssen 3/19/2024 16:59'!zetRechts 	"Laat het bord een zet naar rechts doen en handelt vervolgens het resultaat van die zet af"	| v r|	v := Verplaatsingsrichting uniqueInstance .	r := bord doeZet: (v rechts).	self  handelResulaatAf: r.! !!Mijnen methodsFor: 'private - actions' stamp: 'JackJanssen 3/19/2024 16:43'!eindeRonde: eenResulaatRonde	"De resutaten worden op het scherm getoond en afhankelijk van de reden van beëindiging (einde bereikt, overleden of zelf afgebroken) wordt er een vraag gesteld naar ded te nemen vervolgactie. Als de keuze valt op stoppen, dan wordt het scherm geslsoten."	scherm zetResultaatZetten: aantalZetten Punten: punten Duur: spelduur Levens: levens .	(eenResulaatRonde eindeBereikt ) 		ifTrue: [ 			((UIManager default 				chooseFrom: #('Stoppen' 'Volgende ronde') 				lines: #(1 2) 				message: 'Je hebt de ronde uitgespeeld. Gefeliciteerd. Maak een keuze' ) = 2) 					ifTrue: [ huidigeNivo := huidigeNivo + 1.						(huidigeNivo > maximaleNivo ) 							ifTrue: [  ] 							ifFalse: [ scherm enableStartknop ].						scherm disableAlleRichtingen .						scherm disableEindknop .	]					ifFalse: [ scherm close ] ] 		ifFalse: [ (eenResulaatRonde overleden ) 			ifTrue: [ 				((UIManager default 					chooseFrom: #('Stoppen' 'Opnieuw beginnen') 					lines: #(1 2) 					message: 'Je bent uitgeschakeld. Maak een keuze' ) = 2) 						ifTrue: [ scherm enableStartknop .							scherm disableAlleRichtingen .							scherm disableEindknop .							huidigeNivo := 1 ] 						ifFalse: [ scherm close ]]			ifFalse: [ (eenResulaatRonde spelduurOverschreden ) 				ifTrue: [ 					((UIManager default 						chooseFrom: #('Stoppen' 'Laatste ronde overdoen') 						lines: #(1 2) 						message: 'Je hebt te lang over deze ronde gedaan. Maak een keuze' ) = 2)							ifTrue: [ scherm enableStartknop .								scherm disableAlleRichtingen .								scherm disableEindknop ] 							ifFalse: [ scherm close ] ] 				ifFalse: [  					((UIManager default 						chooseFrom: #('Stoppen' 'Laatste ronde overdoen') 						lines: #(1 2) 						message: 'Je hebt de ronde afgebroken. Maak een keuze' ) = 2) 							ifTrue: [ scherm enableStartknop .								scherm disableAlleRichtingen .								scherm disableEindknop ] 							ifFalse: [ scherm close ]]]].! !!Mijnen methodsFor: 'private - actions' stamp: 'JackJanssen 3/19/2024 16:49'!handelResulaatAf: eenResultaatZet	"Laat de ronde het resultaat van de zet afhandelen. Vervolgens worden, afhankelijk van de vraag of er een eindsituatie is bereikt, de einderonde uitgevoerd, dan wel de mogelijke verplaatsingsrichtingen voor de volgende zet ingesteld op het scherm."	ronde handelResulaatAf: eenResultaatZet .	((ronde overleden ) or: ((ronde eindeBereikt  ) or: (ronde spelduurOverschreden ))) 	ifTrue: [ self beeindigRonde ] 	ifFalse: [ scherm stelRichtingenIn: (eenResultaatZet mogelijkeRichtingen ) ].! !!Mijnen methodsFor: 'private - computation' stamp: 'JackJanssen 3/19/2024 16:35'!aantalMijnenBijNivo: nivonummer Oppervlakte: aantalVakken	"Retourneert het aantal munten als functie van het aantal vakken (inpt) en het nivonummer (input)"	(aantalVakken < 4) 		ifTrue: [ ^ 0 ] 		ifFalse: [ ^ ((aantalVakken / 3) * (nivonummer / 20)) round: 0  ].! !!Mijnen methodsFor: 'private - computation' stamp: 'JackJanssen 3/19/2024 16:36'!aantalMuntenBijNivo: nivonummer Oppervlakte: aantalVakken	"Retourneert het aantal munten als functie van het aantal vakken (input) en het nivonummer (input)"	(aantalVakken < 4) 		ifTrue: [ ^ 0 ] 		ifFalse: [ ^ ((aantalVakken / 3) * (nivonummer / 10)) round: 0  ].! !!Mijnen methodsFor: 'private - computation' stamp: 'JackJanssen 3/19/2024 16:53'!tijdBijNivo: nivonummer Oppervlakte: aantalVakken	"retourneert de maximale speltijd als functie van het nivonummer (input) en het aantal vakken (input). Bij het eerste nivo wordt de tijd heel lang."	(nivonummer = 1)		ifTrue: [ ^ 9999 ] 		ifFalse: [ ^ (aantalVakken * (5 + ((5 * nivonummer) / 10))) round: 0].! !!Mijnen methodsFor: 'initialization' stamp: 'JackJanssen 3/19/2024 16:49'!initialize 	"initialiseert variabelen, vraagt de speler naar diens naam en maakt een Speler, maakt een Hoofdscherm, eem Bord en een Spelronde en opent het scherm"	|spelerNaam bm rm|	spelduur := 0.	aantalZetten := 0.	punten := 0.	levens := 0.	spelerNaam := UIManager default request: 'Hoe heet je' initialAnswer: ' '.	(spelerNaam = ' ') ifTrue: [ ^ 'geen naam ingevoerd'].	speler := Speler metNaam: spelerNaam .	scherm := Hoofdscherm maak: self.	scherm zetSpeler: spelerNaam .	bord := Bord maak .	ronde := Spelronde new.	bm := bord bordmorph .	rm := ronde rondemorph .	scherm zetBord: bm.	scherm zetRonde: rm.	scherm bepaalAfmeting.	self vulNivos .	huidigeNivo := 1.	scherm openInWorld .		! !!Mijnen methodsFor: 'private - initialization' stamp: 'JackJanssen 3/19/2024 16:56'!vulNivos	"vult een array met Niveaus"	| av |	av := bord aantalVakken .	nivos := Array new: 10 .	maximaleNivo := nivos size .	1 to: maximaleNivo do: [ :index | 		nivos at: index put: (Niveau maakNummer: index 												deMijnen: (self aantalMijnenBijNivo: index Oppervlakte: av) 												deMunten: (self aantalMuntenBijNivo: index  Oppervlakte: av) 												deTijd: (self tijdBijNivo: index  Oppervlakte: av)) ].! !Object subclass: #Spelronde	instanceVariableNames: 'aantalLevens aantalZetten puntenwinst spelduur eindeBereikt overleden rondemorph klok maximaleSpelduur spelduurOverschreden'	classVariableNames: ''	package: 'Mijnen'!!Spelronde commentStamp: 'JackJanssen 3/19/2024 18:24' prior: 0!Spelronde is een cyclus beginnend met het opzetten van het bord, het uitvoeren van zetten door de speler en eindigend met het afleveren van de eindstatus van de rondeVerantwoordelijk voor:- bijhouden van de spelduur- aantal zetten bijhouden- aantal punten bijhouden- aantal levens bijhouden- maximale speeltijd bewaken!!Spelronde methodsFor: 'action' stamp: 'JackJanssen 12/12/2023 15:56'!werkPuntenBij: resultaatZet	"hoog het puntenaantal op met het aantal uit het resultaat"	| delta |	delta := resultaatZet puntenwinst.	(delta  ~= 0) ifTrue:  [ puntenwinst := puntenwinst + delta ] ! !!Spelronde methodsFor: 'action' stamp: 'JackJanssen 3/19/2024 18:27'!beeindigRonde	"maak een resultaat ronde en retourneer die. Als de speler het einde heeft bereikt, wordt het aantal levens met 1 opgehoogd."	| r |	r := ResultaatRonde new.	r aantalZetten: aantalZetten .	r eindeBereikt: eindeBereikt .	r puntenwinst: puntenwinst .	r spelduur: maximaleSpelduur - spelduur .	eindeBereikt ifTrue: [ r aantalLevens: (aantalLevens + 1) ] ifFalse: [ r aantalLevens: aantalLevens ].	r overleden: overleden .	r spelduurOverschreden: spelduurOverschreden .	^ r			! !!Spelronde methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 18:25'!aantalLevens: eenGetal	"zet het aantal levens op de ingevoerde waarde."	"N.B. dit is een cumulatieve waarde over alle eerdere ronden en wordt dus aangeleverd vanuit Mijnen"	aantalLevens := eenGetal .! !!Spelronde methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 18:36'!eindeBereikt	"retourneert de variabele eindeBereikt (boolean). 'true' betekent dat de speler het einde van het bord heeft bereikt"	^ eindeBereikt ! !!Spelronde methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 19:20'!overleden 	"retourneert de overleden-variabele (boolean). 'true' geeft aan dat de speler is overleden"	^ overleden! !!Spelronde methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 19:21'!rondemorph	"retourneert de rondemorph voor de SchermRond"	^ rondemorph ! !!Spelronde methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 19:22'!spelduur: eenGetal	"zet de spelduur op het ingevoerde getal"	spelduur := eenGetal .! !!Spelronde methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 19:23'!spelduurOverschreden	"retourneert de spelduurOverschreden variabele (boolean). 'true' betekent dat de speler langer heeft gespeeld dan toegestaan"	^ spelduurOverschreden ! !!Spelronde methodsFor: 'private - actions' stamp: 'JackJanssen 3/19/2024 18:40'!handelResulaatAf: eenResultaatZet	"handel het resultaat van de zet af: de variabelen worden bijgewerkt. Als de spelduur onder 0 komt, is de maximale speeltijd overschreden. Als er bij de zet een mijn is betreden, wordt het aantal levens met 1 verminderd. Als er geen levens meer zijn, dan wordt de ronde beëindigd met het zetten van de indicator overleden. De resultaten worden op het scherm getoond"	aantalZetten := aantalZetten + 1.	puntenwinst := puntenwinst + eenResultaatZet puntenwinst.	spelduur := spelduur - klok geefVerlopenTijd.	spelduur <= 0 ifTrue: [ spelduurOverschreden := true ].	eenResultaatZet mijnBetreden		ifTrue: [			eindeBereikt := false.			aantalLevens > 0				ifTrue: [					aantalLevens := aantalLevens - 1.					overleden := false ]				ifFalse: [ overleden := true ] ]		ifFalse: [			eindeBereikt := eenResultaatZet einderonde ].	rondemorph		zetContentZetten: aantalZetten		Levens: aantalLevens		Punten: puntenwinst		Duur: spelduur! !!Spelronde methodsFor: 'initialization' stamp: 'JackJanssen 3/19/2024 19:15'!initialize 	"Alle variabelen worden geïnitialiseerd op 0 dan wel false. Een nieuwe SchermRonde en een nieuwe Klok worden gemaakt."		aantalLevens := 0.	aantalZetten := 0.	puntenwinst := 0.	spelduur := 0.	eindeBereikt := false.	overleden := false.	rondemorph := SchermRonde new.	klok := Klok uniqueInstance .			! !!Spelronde methodsFor: 'intialization' stamp: 'JackJanssen 3/19/2024 19:19'!nieuwNivo: hetNivo metLevens: hetAantalLevens	"Start een nieuwe ronde voor het ingevoerde nivo en met het ingevoerde aantal levens. De maximale spelduur wordt overgenomen van het nivo. De klok krijgt de opdracht de tijd te registreren. Overige variabelen worden geïnitialiseerd op 0 dan wel false. Alle variabelen worden op het scherm getoond."	aantalLevens := hetAantalLevens  .	maximaleSpelduur  := (hetNivo maximaleSpeeltijd ).	spelduur := maximaleSpelduur .	aantalZetten := 0.	puntenwinst := 0 .	eindeBereikt := false.	overleden := false.	spelduurOverschreden := false.	klok registreerTijd .	rondemorph zetContentZetten: aantalZetten  Levens: aantalLevens  Punten: puntenwinst  Duur: spelduur .	rondemorph zetNivo: (hetNivo niveaunummer  ).! !Object subclass: #Speler	instanceVariableNames: 'naamSpeler'	classVariableNames: ''	package: 'Mijnen'!!Speler commentStamp: 'JackJanssen 11/25/2023 18:35' prior: 0!Speler is de gebruiker van het spel!!Speler methodsFor: 'accessing - attributes' stamp: 'JackJanssen 3/19/2024 18:21'!naam	"retouneert de naam van de Speler"	^ naamSpeler ! !!Speler methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 18:22'!naamSpeler: eenString	"zet de naam van de Speler op de ingevoerde string"	naamSpeler := eenString ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Speler class	instanceVariableNames: ''!!Speler class commentStamp: '' prior: 0!Speler is de gebruiker van het spel!!Speler class methodsFor: 'creating' stamp: 'JackJanssen 12/24/2023 15:07'!metNaam: eenString	"Maak een nieuw Vak op de positie rij x kolom"	| voorkomen |	voorkomen := self new.	voorkomen naamSpeler:  eenString  .	^ voorkomen ! !Object subclass: #Bord	instanceVariableNames: 'breedte hoogte positieSpeler vakken bordmorph'	classVariableNames: ''	package: 'Mijnen'!!Bord commentStamp: 'JackJanssen 3/17/2024 15:43' prior: 0!Bord is het speelveld. Het is rechthoekig en verdeeld in een aantal Vakken. Het bord heeft 1 ingang en 1 uitgang, aan de onderkant resp. de bovenkant bij breedtecoördinaat halverwege.Verantwoordelijkheden:- Maken van de vakken op de juiste coördinaten- Aangeven welke vakken grenzen aan de in- en uitgang- Bijhouden waar de speler staat- Bepalen welke richtingen zijn toegestaan- Bepalen hoeveel mijnen er in de omgeving liggen- Verplaatsen van de speler!!Bord methodsFor: 'accessing' stamp: 'JackJanssen 3/15/2024 14:54'!toonAlleVakken	"geeft aan alle vakken de opdracht de inhoud te tonen"	1 to: hoogte do: [ :rij |		1 to: breedte do: [ :kolom |			|vak|			vak := vakken at: rij at: kolom .			vak toonInhoud ] ] .! !!Bord methodsFor: 'accessing' stamp: 'JackJanssen 3/17/2024 16:13'!bordmorph	"retourneert de bordmorph van het bord"	^ bordmorph ! !!Bord methodsFor: 'accessing' stamp: 'JackJanssen 3/17/2024 16:13'!bordmorph: eenMorph	"zet de bordmorph variabele van het bord"	bordmorph := eenMorph.! !!Bord methodsFor: 'accessing' stamp: 'JackJanssen 3/17/2024 16:14'!breedte	"geeft de breedte-variabele van het bord (aantal kolommen)"	^ breedte ! !!Bord methodsFor: 'accessing' stamp: 'JackJanssen 3/17/2024 16:15'!breedte: eenGetal	"Zet de breedte-variabele van het bord op een gegeven waarde"	breedte := eenGetal ! !!Bord methodsFor: 'accessing' stamp: 'JackJanssen 3/17/2024 17:28'!hoogte	"retourneert de hoogte-variabele (aantal rijen van het bord)"	^ hoogte ! !!Bord methodsFor: 'accessing' stamp: 'JackJanssen 3/17/2024 17:35'!hoogte: eenGetal	"Zet de hoogte-variabele op een gegeven waarde"	hoogte := eenGetal ! !!Bord methodsFor: 'arithmetic' stamp: 'JackJanssen 2/19/2024 16:36'!toegestaneRichtingen	"Retourneert een Set van richtingen waarin de speler mag bewegen.	Als de speler nog niet op het bord staat is op de enige mogelijke richting.	Als de speler tegen een zijkant staat, mag hij niet naar die zijkant bewegen. De enige uitzondering daarop is wanneer hij voor de uitgang staat.	In alle andete gevallen zijn alle vier de richtingen links, rechts, op en neer toegestaan"	| v |	v := Verplaatsingsrichting uniqueInstance .	positieSpeler ifNil: [ ^ Set with: (v op) ].	(positieSpeler y = hoogte ) 		ifTrue: [ (positieSpeler x ) = 1 						ifTrue: [ ^ Set with: (v op) with: (v rechts ) ]						ifFalse: [ (positieSpeler x = breedte)										ifTrue: [ ^ Set with: (v op) with: (v links) ]										ifFalse: [ ^ Set with: (v op) with: (v links) with: (v rechts ) ]  									] 					] 		ifFalse: [(positieSpeler y = 1 ) 						ifTrue: [ (positieSpeler x ) = 1										ifTrue: [ ^ Set with: (v rechts ) with: (v neer )	]										ifFalse: [ (positieSpeler x = breedte)														ifTrue: [ ^ Set with: (v links) with: (v neer )  ]														ifFalse: [ (positieSpeler x = (breedte / 2 round: 0)) 																		ifTrue: [ ^ Set with: (v links) with: (v rechts ) with: (v op) with: (v neer) ]																		ifFalse: [^ Set with: (v links) with: (v rechts ) with: (v neer) ]																	] 													] 									] 						ifFalse: [ (positieSpeler x = 1)										ifTrue:[^ Set with: (v rechts ) with: (v op) with: (v neer)]										ifFalse: [(positieSpeler x = breedte )														ifTrue: [^ Set with: (v links) with: (v op) with: (v neer)]														ifFalse: [^ Set with: (v links) with: (v rechts ) with: (v op) with: (v neer) ]													]									]						].	! !!Bord methodsFor: 'arithmetic' stamp: 'JackJanssen 3/17/2024 16:11'!aantalVakken	"berekent en retourneert het aantal vakken op het bord"	"instance variabelen: hoogte, breedte"	^ hoogte * breedte .! !!Bord methodsFor: 'arithmetic' stamp: 'JackJanssen 3/17/2024 16:16'!controleerRichting: eenRichting	"Retourneert true als de richting is toegestaan bij de huidige positie van de speler, anders false"	"gebruikt de instance variabele positieSpeler"	| v |	v := Verplaatsingsrichting uniqueInstance  .	((eenRichting = v links) or: ((eenRichting = v rechts) or: ((eenRichting = v op) or: (eenRichting = v neer ))))	ifTrue: [ positieSpeler ifNil: [ (eenRichting = v op)													ifTrue: [ ^ true ]													ifFalse: [ ^ false ] ]. 				(positieSpeler y = hoogte) 				ifTrue: [ (eenRichting = v neer)							 ifTrue: [ ^ false ]].				(positieSpeler x = 1)				ifTrue: [ (eenRichting = v links)							 ifTrue: [ ^ false ] ]. 				(positieSpeler x = breedte )				ifTrue: [ (eenRichting = v rechts )							 ifTrue: [ ^ false ]  ]. 				(positieSpeler y = 1 )				ifTrue: [ (eenRichting = v op)							 ifTrue: [ (positieSpeler x = (breedte / 2 round: 0))											ifTrue: [  ^ true ] 											ifFalse: [ ^ false ] ] ].				^ true]	ifFalse: [ ^ false ]! !!Bord methodsFor: 'arithmetic' stamp: 'JackJanssen 3/17/2024 17:27'!doeZet: eenRichting	"Verplaatst de speler in een richting, en berekent het aantal mijnen dat op de naastgelegen vakken ligt. Als de speler nog op het bord staat, wordt het betreden vak geëffectueerd en de mogelijke verplaatsingsrichtingen worden bepaald. Als de speler de uitgang heeft bereikt wordt de in de uitkomst opgenomen. Retourneer de uitkomst in een ResultaatZet"	| resultaatVerplaatsing resultaatZet|	resultaatVerplaatsing := (self verplaatsSpeler: eenRichting) .	(resultaatVerplaatsing = 1) "dan is de uitgang bereikt"		ifTrue: [ self toonSpelerInUitgang ]		ifFalse: [ self toonSpelerPositie] .	bordmorph toonMijnen: self telMijnen.	(resultaatVerplaatsing  = 0) "dan is de verplaatsing geslaagd en staat de speler nog op het bord"		ifTrue: [ 			|hetVak | 			hetVak := vakken at: (positieSpeler y) at: (positieSpeler x)  .			hetVak ifNil: [ ^ self error: 'op niet bestaand vak beland' ] .			resultaatZet := hetVak effectueerBetreding .			resultaatZet einderonde: false .			resultaatZet mogelijkeRichtingen: (self toegestaneRichtingen ) .			^ resultaatZet ]		ifFalse: [ 			(resultaatVerplaatsing  = 1) "dan is de uitgang bereikt"				ifTrue: [ 					resultaatZet := ResultaatZet new.					resultaatZet mijnBetreden:  false .					resultaatZet puntenwinst: 0.					resultaatZet einderonde: true.					^ resultaatZet  ]				ifFalse: [ ^ self error: 'verplaatsing mislukt' ] .				   ].! !!Bord methodsFor: 'private - actions' stamp: 'JackJanssen 3/17/2024 16:21'!verplaatsSpeler: eenRichting	"Verplaats de speler 1 stap in de aangegeven richting. De positieSpeler wordt bijgewerkt. Er wordt een getal geretourneerd: 	0 wanneer de verplaatsing is geslaagd maar de speler nog op het bord staat,	1 wanneer de verplaatsing is geslaagd en de speler het bord heeft verlaten,	-1 wanneer de verplaatsing mislukt"	"gewijzigde instance variabele: positieSpeler"	| v |	v := Verplaatsingsrichting uniqueInstance  .	(self controleerRichting: eenRichting)	ifTrue: [ 		(eenRichting = (v op))		ifTrue: [ 				(self handelOpwaartsAf )			ifTrue: [ ^ 1 ] 			ifFalse: [ ^ 0 ]]. 		(eenRichting = (v links))		ifTrue: [ positieSpeler  := positieSpeler + (-1 @ 0). ^ 0 ].		(eenRichting = (v rechts))		ifTrue: [ positieSpeler  := positieSpeler + (1 @ 0). ^ 0 ].		(eenRichting = (v neer))		ifTrue: [ positieSpeler := positieSpeler + ( 0 @ 1). ^ 0 ].]	ifFalse: [ ^ -1 ] ! !!Bord methodsFor: 'private - actions' stamp: 'JackJanssen 3/17/2024 16:23'!handelOpwaartsAf	"Als de speler nog buiten het veld staat, dan op de eerste positie bij de opening zetten.	Anders, als de speler voor de uitgang staat, de speler buiten het veld plaatsten	Anders de hoogtecoordinaat 1 ophogen.	Vooraf moet zijn gecontroleerd of de zet is toegestaan	retourneert true als de speler het bord heeft verlaten, anders false"	"gewijzigde instance variabele: positieSpeler"	positieSpeler 	ifNotNil: [ 		(positieSpeler = ((breedte / 2 round: 0)@1)) 		ifTrue: [  			positieSpeler := nil . ^true ] 		ifFalse: [ 			positieSpeler  := positieSpeler - ( 0 @ 1). ^false ]  		] 	ifNil:  [ 				positieSpeler := (breedte / 2 round: 0)@hoogte .				^ false ]			! !!Bord methodsFor: 'initalize' stamp: 'JackJanssen 3/17/2024 17:33'!initialiseer: hetNiveau	"Initialiseer de vakken van het bord en plaats overeenkomstig het nivo aantal mijnen en munten"	"gebruikte instance variabelen: hoogte, breedte, vakken, positieSpeler, bordmorph"	1 to: hoogte do: [ :rij | 		1 to: breedte do: [ :kolom | 			| v |			v:= vakken at: rij at: kolom.			v initialiseer .			].		].	hetNiveau plaatsInhoud: vakken.	self maakInUitgangVrij. "eventuele mijnen voor de in- en uitgang weghalen"	positieSpeler := nil.	self toonSpelerInIngang.	bordmorph toonMijnen: 0.	! !!Bord methodsFor: 'private - display' stamp: 'JackJanssen 3/20/2024 20:36'!toonSpelerInUitgang	"toont de afbeelding van de speler op de uitgang"	"scope: bordmorph"	bordmorph verplaatsMannetjeNaarUitgang.! !!Bord methodsFor: 'private - display' stamp: 'JackJanssen 3/20/2024 20:36'!toonSpelerInIngang	"toont de afbeelding van de speler een het begin van het spel"	"scope: bordmorph"	bordmorph verplaatsMannetjeNaarIngang! !!Bord methodsFor: 'private - initialization' stamp: 'JackJanssen 3/17/2024 17:37'!maakInUitgangVrij	"Als er op de vakken direct bij de ingang of de uitgang mijnen liggen, worden die verwijderd"	"scope: vakken, hoogte, breedte"		(vakken at: 1 at: (breedte / 2 round: 0)) ruimMijn.	(vakken at: hoogte at: (breedte / 2 round: 0)) ruimMijn.! !!Bord methodsFor: 'private - initialization' stamp: 'JackJanssen 3/17/2024 17:40'!maakVakken	"Zet een Array2D op met Vakken, volgende de variabelen breedte (aantal kolommen) en hoogte (aantal rijen)"	bordmorph zetAfmeting: breedte bij: hoogte .	vakken := Array2D rows: hoogte  columns: breedte tabulate: [ :rij :kolom |		 (self nieuwVakOp:  kolom op: rij ) ].		 ! !!Bord methodsFor: 'private - initialization' stamp: 'JackJanssen 3/17/2024 17:50'!nieuwVakOp: i op: j	"Maak een vak op positie (i,j) en voeg het toe op mijn bord op de correcte positie. Retourneer het nieuwe Vak"	"scope: bordmorph"	| c |	c := Vak new.	bordmorph plaatsVak: (c morph) op: i bij: j.	^ c! !!Bord methodsFor: 'private - searching' stamp: 'JackJanssen 3/17/2024 17:45'!telMijnen	"telt het aantal mijnen (nog niet geëxplodeerd) in de vakken grenzend aan de positie van de speler. Dit aantal wordt geretourneerd"	"scope: positieSpeler, vakken"	| teller |	teller := 0.	positieSpeler ifNotNil:  [		(positieSpeler x = 1) ifFalse: [ 			((vakken at: (positieSpeler y) at: ((positieSpeler x) - 1)) heeftMijn) ifTrue: [teller := teller + 1]].		(positieSpeler x = breedte ) ifFalse: [ 			((vakken at: (positieSpeler y) at: ((positieSpeler x) + 1)) heeftMijn) ifTrue: [teller := teller + 1] ].		(positieSpeler y = 1) ifFalse: [ 			((vakken at: ((positieSpeler y) - 1) at: (positieSpeler x)) heeftMijn) ifTrue: [teller := teller + 1] ].		(positieSpeler y = hoogte ) ifFalse: [ 			((vakken at: ((positieSpeler y) + 1) at: (positieSpeler x)) heeftMijn) ifTrue: [teller := teller + 1] ].		 ] .	^ teller! !!Bord methodsFor: 'display' stamp: 'JackJanssen 3/17/2024 17:50'!toonSpelerPositie	"toont de speler op de actuele positie"	"scope: vakken, positieSpeler, bordmorph"	positieSpeler ifNotNil: [ 			|v|			v := (vakken at: (positieSpeler y) at: (positieSpeler x)) morph.			bordmorph verplaatsMannetjeNaar: v].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Bord class	instanceVariableNames: ''!!Bord class commentStamp: '' prior: 0!Bord is het speelveld. Het is rechthoekig en verdeeld in een aantal Vakken. Het bord heeft 1 ingang en 1 uitgang, aan de onderkant resp. de bovenkant bij breedtecoördinaat halverwege.Verantwoordelijkheden:- Maken van de vakken op de juiste coördinaten- Aangeven welke vakken grenzen aan de in- en uitgang- Bijhouden waar de speler staat- Bepalen welke richtingen zijn toegestaan- Bepalen hoeveel mijnen er in de omgeving liggen- Verplaatsen van de speler!!Bord class methodsFor: 'creating' stamp: 'JackJanssen 3/17/2024 17:57'!maak	"Maak een nieuw Bord en zet de hoogte en breedte. Maak het schermdeel voor het bord en maak de vakken"	"instance variabelen: hoogte (aantal rijen), breedte (aantal kolommen), bordmorph"	| voorkomen |	voorkomen := self new.	voorkomen breedte: 9.	voorkomen hoogte: 7.	voorkomen bordmorph: SchermBord new.	voorkomen maakVakken .	^ voorkomen 	! !Object subclass: #Vak	instanceVariableNames: 'betreden morph vakinhoud'	classVariableNames: ''	package: 'Mijnen'!!Vak commentStamp: 'JackJanssen 3/19/2024 19:33' prior: 0!Vak is het onderdeel waaruit het Bord is opgebouwd. Als de Speler een Vak betreedt wordt de verborgen VakInhoud geëffectueerd.Verantwoordelijk voor:- plaatsen van mijn, munt of schat- bijhouden van betreding- effectueren nieuwe betreding- aangeven of het vak een mijn bevat, vanwege de telling van mijnen- opruimen van een mijn in geval het vak bij in- of uitgang ligt- het tonen van de inhoud bij beëindiging van een ronde!!Vak methodsFor: 'accessing' stamp: 'JackJanssen 12/4/2023 15:50'!vakinhoud	"Geeft de vakinhoud"	^ vakinhoud .! !!Vak methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 19:36'!heeftMijn	"als de vakinhoud gevuld is, retourneer dan of dat al dan niet een mijn is. Anders retourneer false"	vakinhoud ifNotNil: [ ^ vakinhoud isMijn ] ifNil: [ ^ false ].! !!Vak methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 19:38'!morph	"retourneer de SchermVak-morph"	^ morph ! !!Vak methodsFor: 'setting' stamp: 'JackJanssen 3/19/2024 19:43'!plaatsMijn	"zet een Mijn in de vakinhoud"	vakinhoud := Mijn new.! !!Vak methodsFor: 'setting' stamp: 'JackJanssen 3/19/2024 19:43'!plaatsMunt	"zet een Munt in de vakinhoud"	vakinhoud := Munt new.! !!Vak methodsFor: 'setting' stamp: 'JackJanssen 3/19/2024 19:45'!plaatsSchat	"zet een Schat in de vakinhoud"	vakinhoud := Schat  new.! !!Vak methodsFor: 'initialization' stamp: 'JackJanssen 3/19/2024 19:37'!initialiseer	"initialiseer het vak: zet betreden op false en de vakinhoud op nil. Verwijder het eventuele symbool. Zet de vak-morph uit"	betreden := false.	vakinhoud ifNotNil: [ 		vakinhoud deleteSymbool .		vakinhoud := nil].	morph turnOff .! !!Vak methodsFor: 'initialization' stamp: 'JackJanssen 3/19/2024 19:38'!initialize 	"maak een nieuw SchermVak en zet de betreden-indicator op false."		morph := SchermVak new.	betreden := false.! !!Vak methodsFor: 'animation' stamp: 'JackJanssen 3/19/2024 19:35'!effectueerBetreding 	"in geval van een nieuwe betreding: effectueer betreding van de vakinhoud en zet de morph aan. Als het vak al eerder was betreden geef dan initiële waarden terug."	| r |	betreden 	ifTrue: [ 		r := ResultaatZet new.		r mijnBetreden:  false.		r puntenwinst: 0.		^ r ] 	ifFalse: [ 		betreden := true.		morph turnOn .		vakinhoud 		ifNil: [			r := ResultaatZet new.			r mijnBetreden:  false.			r puntenwinst: 0.			^ r] 		ifNotNil: [ ^ vakinhoud effectueerBetreding: morph  ] ]. 	! !!Vak methodsFor: 'setup' stamp: 'JackJanssen 3/19/2024 19:46'!ruimMijn	"Als de vakinhoud een Mijn is, verwijder deze"		(vakinhoud class = Mijn) ifTrue: [ vakinhoud := nil ] .! !!Vak methodsFor: 'action handling' stamp: 'JackJanssen 3/19/2024 19:47'!toonInhoud	"als het vak nog niet is betreden, toon de inhoud van het vak in de SchermVak-morph"	betreden ifFalse: [ 		vakinhoud ifNotNil: [ vakinhoud toonInhoud: morph   ] ]! !Object subclass: #Niveau	instanceVariableNames: 'aantalMijnen aantalMunten maximaleSpeeltijd niveaunummer'	classVariableNames: ''	package: 'Mijnen'!!Niveau commentStamp: 'JackJanssen 3/17/2024 15:49' prior: 0!Niveau is de moeilijkheidsclassificatie van een spelrondeVerantwoodelijkheden:- plaatsen van de munten, mijnen en schat in de vakken op het bord!!Niveau methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 17:04'!maximaleSpeeltijd	"retourneert de maximale speeltijd"	^ maximaleSpeeltijd ! !!Niveau methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 17:08'!niveaunummer	"retourneert het nivonummer"	^ niveaunummer .! !!Niveau methodsFor: 'private - accessing' stamp: 'JackJanssen 3/19/2024 17:00'!aantalMijnen: eenAantal	"Zet het aantal mijnen op het gegeven aantal"	aantalMijnen := eenAantal ! !!Niveau methodsFor: 'private - accessing' stamp: 'JackJanssen 12/12/2023 15:06'!aantalMunten: eenAantal	"zet het aantal munten op het gegeven aantal"	aantalMunten := eenAantal ! !!Niveau methodsFor: 'private - accessing' stamp: 'JackJanssen 12/12/2023 15:08'!maximaleSpeeltijd: aantalSeconden	"zet de maximale speeltijd op het gegeven aantal seconden"	maximaleSpeeltijd := aantalSeconden ! !!Niveau methodsFor: 'private - accessing' stamp: 'JackJanssen 12/12/2023 15:10'!niveaunummer: eenGetal	"zet het niveaunummer op het gegeven getal"	niveaunummer := eenGetal ! !!Niveau methodsFor: 'initialization - data' stamp: 'JackJanssen 3/19/2024 17:07'!plaatsInhoud: vakken	"plaatst de schat, het aantal mijnen en het aantal munten random in de vakken. Er wordt gezorgd dat er hoogstens 1 inhoud per vak komt."	| rij kolom v rijen kolommen|	rijen := vakken numberOfRows.	kolommen := vakken numberOfColumns.	rij := rijen atRandom .	kolom := kolommen atRandom .	v:= vakken at: rij at: kolom .	v plaatsSchat .	1 to: aantalMijnen do: [ :teller | 		[v vakinhoud] whileNotNil: [  			rij := rijen atRandom .			kolom := kolommen atRandom .			v:= vakken at: rij at: kolom .			].		v plaatsMijn .		].	1 to: aantalMunten do: [ :teller |		[v vakinhoud] whileNotNil: [  			rij := rijen atRandom .			kolom := kolommen atRandom .			v:= vakken at: rij at: kolom .			].		v plaatsMunt  .		]. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Niveau class	instanceVariableNames: ''!!Niveau class commentStamp: '' prior: 0!Niveau is de moeilijkheidsclassificatie van een spelrondeVerantwoodelijkheden:- plaatsen van de munten, mijnen en schat in de vakken op het bord!!Niveau class methodsFor: 'creating' stamp: 'JackJanssen 3/19/2024 17:02'!maakNummer: hetNummer deMijnen: mijnen deMunten: munten deTijd: speeltijd	"Maak een nieuw voorkomen met het nummer, het aantal mijnen, het aantal munten en de maximale speeltijd"	| n |	n := self new.	n niveaunummer: hetNummer.	n aantalMijnen: mijnen .	n aantalMunten: munten.	n maximaleSpeeltijd: speeltijd .	^ n! !Object subclass: #Vakinhoud	instanceVariableNames: ''	classVariableNames: ''	package: 'Mijnen'!!Vakinhoud commentStamp: 'JackJanssen 3/19/2024 19:48' prior: 0!Vakinhoud is de verborgen inhoud van een Vak, hetgeen kan zijn een Mijn, een Munt of een Schat.Een Vak heeft, in een gegeven Spelronde, hooguit 1 VakInhoud.In een Spelronde is er precies 1 VakInhoud van type Schat.Alle verantwoordelijkheden zijn gedelegeerd aan de subklassen Mijn, Munt en Schat.!!Vakinhoud methodsFor: 'animation' stamp: 'JackJanssen 2/22/2024 15:09'!effectueerBetreding: eenMorph	^ self subclassResponsibility! !!Vakinhoud methodsFor: 'animation' stamp: 'JackJanssen 2/22/2024 15:30'!isMijn	^ self subclassResponsibility! !!Vakinhoud methodsFor: 'action handling' stamp: 'JackJanssen 3/11/2024 18:06'!deleteSymbool	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	^ self subclassResponsibility! !!Vakinhoud methodsFor: 'action handling' stamp: 'JackJanssen 3/15/2024 14:59'!toonInhoud: eenMorph	^ self subclassResponsibility! !Vakinhoud subclass: #Mijn	instanceVariableNames: 'geexplodeerd symbool'	classVariableNames: ''	package: 'Mijnen'!!Mijn commentStamp: 'JackJanssen 11/26/2023 15:49' prior: 0!Mijn is een verborgen inhoud van een Vak die de speler vernietigt bij het betreden van het VakVerantwoordelijkheden:- bij het betreden moet de mijn ontploffen!!Mijn methodsFor: 'action handling' stamp: 'JackJanssen 3/19/2024 19:49'!deleteSymbool 	"Als er een symbool is, verwijder dit van het scherm"	symbool ifNotNil: [ symbool delete  ]! !!Mijn methodsFor: 'action handling' stamp: 'JackJanssen 3/19/2024 20:00'!toonInhoud: eenMorph	"toont het symbool in het midden van de ingevoerde morph"	eenMorph addMorph: symbool.	symbool position: eenMorph geefMidden - (((symbool width) / 2 )@ ((symbool height) / 2)).! !!Mijn methodsFor: 'animation' stamp: 'JackJanssen 3/19/2024 19:52'!effectueerBetreding: eenMorph	"Retourneer een ResultaatZet met mijnbetreden = true en puntenwinst = 0. Toon het mijnsymbool in de ingevoerde morph, op de middenpositie"	| r |	r := ResultaatZet new.	r mijnBetreden:  true.	r puntenwinst: 0.	geexplodeerd := true.	eenMorph addMorph: symbool.	symbool position: eenMorph geefMidden - (((symbool width) / 2 )@ ((symbool height) / 2)).	^ r.! !!Mijn methodsFor: 'animation' stamp: 'JackJanssen 3/19/2024 19:57'!isMijn	"retourneert true als de mijn nog niet is geëxplodeerd, anders false"	geexplodeerd ifTrue: [ ^ false ] ifFalse: [ ^ true] ! !!Mijn methodsFor: 'initialization' stamp: 'JackJanssen 3/19/2024 19:55'!initialize 	"initialiseer de geexplodeerd-indicator en laad het mijnsymbool"	"momenteel gebeurt dat nog van een fixed locatie, en die moet nog relatief worden gemaakt"	geexplodeerd := false.	symbool := ImageMorph new .	symbool form: (Form fromFileNamed: '/home/jack/Pharo/workspace/Mijnen/mijn.png').! !Vakinhoud subclass: #Munt	instanceVariableNames: 'symbool'	classVariableNames: ''	package: 'Mijnen'!!Munt commentStamp: 'JackJanssen 11/26/2023 15:54' prior: 0!Munt is een verborgen inhoud van een Vak die dient als beloning. Het is de kleinste beloningseenheid.!!Munt methodsFor: 'action handling' stamp: 'JackJanssen 3/19/2024 19:49'!deleteSymbool 	"Als er een symbool is, verwijder dit van het scherm"	symbool ifNotNil: [ symbool delete  ]! !!Munt methodsFor: 'action handling' stamp: 'JackJanssen 3/19/2024 20:00'!toonInhoud: eenMorph	"toont het symbool in het midden van de ingevoerde morph"	eenMorph addMorph: symbool.	symbool position: eenMorph geefMidden - (((symbool width) / 2 )@ ((symbool height) / 2)).! !!Munt methodsFor: 'animation' stamp: 'JackJanssen 3/19/2024 19:53'!effectueerBetreding: eenMorph	"Retourneer een ResultaatZet met mijnbetreden = false en puntenwinst = 1. Toon het muntsymbool in de ingevoerde morph, op de middenpositie"	| r |	r := ResultaatZet new.	r mijnBetreden: false.	r puntenwinst: 1.	eenMorph addMorph: symbool.	symbool position: eenMorph geefMidden - (((symbool width) / 2 )@ ((symbool height) / 2)).	^ r.! !!Munt methodsFor: 'animation' stamp: 'JackJanssen 3/19/2024 19:57'!isMijn	"retourneert false"	^ false.! !!Munt methodsFor: 'initialization' stamp: 'JackJanssen 3/19/2024 19:56'!initialize 	"laad het muntsymbool"	"momenteel gebeurt dat nog van een fixed locatie, en die moet nog relatief worden gemaakt"	symbool := ImageMorph new .	symbool form: (Form fromFileNamed: '/home/jack/Pharo/workspace/Mijnen/munt.png').! !Vakinhoud subclass: #Schat	instanceVariableNames: 'symbool'	classVariableNames: ''	package: 'Mijnen'!!Schat commentStamp: 'JackJanssen 11/26/2023 15:54' prior: 0!Schat is een verborgen inhoud van een Vak. Het is een beloning voor de speler. De waarde is gelijk aan 20 munten. Op een bord is er precies 1 Schat.Verantwoordelijkheden:- bij betreden tonen dat er een Schat aanwezig is.!!Schat methodsFor: 'action handling' stamp: 'JackJanssen 3/19/2024 19:49'!deleteSymbool 	"Als er een symbool is, verwijder dit van het scherm"	symbool ifNotNil: [ symbool delete  ]! !!Schat methodsFor: 'action handling' stamp: 'JackJanssen 3/19/2024 20:01'!toonInhoud: eenMorph	"toont het symbool in het midden van de ingevoerde morph"	eenMorph addMorph: symbool.	symbool position: eenMorph geefMidden - (((symbool width) / 2 )@ ((symbool height) / 2)).! !!Schat methodsFor: 'animation' stamp: 'JackJanssen 3/19/2024 19:53'!effectueerBetreding: eenMorph	"Retourneer een ResultaatZet met mijnbetreden = false en puntenwinst = 10. Toon het schatsymbool in de ingevoerde morph, op de middenpositie"	| r |	r := ResultaatZet new.	r mijnBetreden:  false.	r puntenwinst: 10.	eenMorph addMorph: symbool.	symbool position: eenMorph geefMidden - (((symbool width) / 2 )@ ((symbool height) / 2)).	^ r.! !!Schat methodsFor: 'animation' stamp: 'JackJanssen 3/19/2024 19:58'!isMijn	"retourneert false"	^ false.! !!Schat methodsFor: 'initialization' stamp: 'JackJanssen 3/19/2024 19:56'!initialize 	"laad het schatsymbool"	"momenteel gebeurt dat nog van een fixed locatie, en die moet nog relatief worden gemaakt"	symbool := ImageMorph new .	symbool form: (Form fromFileNamed: '/home/jack/Pharo/workspace/Mijnen/schat.png').! !Object subclass: #Verplaatsingsrichting	instanceVariableNames: ''	classVariableNames: ''	package: 'Mijnen'!!Verplaatsingsrichting commentStamp: 'JackJanssen 3/19/2024 20:14' prior: 0!EnumeratieVerplaatsingsrichting geeft de mogelijke verplaatsingsrichtingen in een zet!!Verplaatsingsrichting methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 20:15'!links	"retourneert de waarde voor links"	^ 1! !!Verplaatsingsrichting methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 20:15'!neer	"retourneert de waarde voor neer"	^ 4! !!Verplaatsingsrichting methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 20:16'!op	"retourneert de waarde voor op"	^ 3! !!Verplaatsingsrichting methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 20:16'!rechts	"retourneert de waarde voor rechts"	^ 2! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Verplaatsingsrichting class	instanceVariableNames: 'uniqueInstance'!!Verplaatsingsrichting class commentStamp: '' prior: 0!EnumeratieVerplaatsingsrichting geeft de mogelijke verplaatsingsrichtingen in een zet!!Verplaatsingsrichting class methodsFor: 'instance creation' stamp: 'JackJanssen 12/8/2023 11:23'!uniqueInstance 	"comment stating purpose of class-side method"	"scope: class-variables  &  class-instance-variables"	uniqueInstance ifNil: [ uniqueInstance := self new ].	^ uniqueInstance ! !Object subclass: #ResultaatZet	instanceVariableNames: 'mijnBetreden puntenwinst einderonde mogelijkeRichtingen'	classVariableNames: ''	package: 'Mijnen'!!ResultaatZet commentStamp: 'JackJanssen 3/17/2024 15:53' prior: 0!InterfaceResultaatZet communiceert het complexe resultaat van een zet.!!ResultaatZet methodsFor: 'accessing' stamp: 'JackJanssen 12/8/2023 11:32'!puntenwinst	"retourneert het aantal uit puntenwinst"	^ puntenwinst ! !!ResultaatZet methodsFor: 'accessing' stamp: 'JackJanssen 2/19/2024 16:00'!einderonde: eenBoolean	"zet de waarde van 'einderonde' op een boolean"	einderonde  := eenBoolean ! !!ResultaatZet methodsFor: 'accessing' stamp: 'JackJanssen 2/19/2024 16:00'!mijnBetreden: eenBoolean	"zet de waarde van 'mijnBetreden' op een boolean"	mijnBetreden  := eenBoolean ! !!ResultaatZet methodsFor: 'accessing' stamp: 'JackJanssen 2/19/2024 16:00'!puntenwinst: eenGetal	"zet de waarde van puntenwinst op een getal"	puntenwinst := eenGetal! !!ResultaatZet methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 17:17'!einderonde	"retourneert of de speler het bord heeft beëindigd (boolean). 'true' =  bord is beëindigd"	^ einderonde ! !!ResultaatZet methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 17:20'!mijnBetreden	"retourneert of de speler een mijn heeft betreden en daarbij is overleden (boolean). 'true' = mijn betreden en overleden"	^ mijnBetreden  .! !!ResultaatZet methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 17:21'!mogelijkeRichtingen: setVerplaatsingsrichtingen	"zet de mogelijke richtingen op de set van verplaatsingsrichtingen"	mogelijkeRichtingen := setVerplaatsingsrichtingen .! !!ResultaatZet methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 17:22'!mogelijkeRichtingen	"retourneert de set van mogelijke richtingen"	^ mogelijkeRichtingen .! !Object subclass: #ResultaatRonde	instanceVariableNames: 'spelduur aantalZetten puntenwinst eindeBereikt aantalLevens overleden spelduurOverschreden'	classVariableNames: ''	package: 'Mijnen'!!ResultaatRonde commentStamp: 'JackJanssen 3/17/2024 15:52' prior: 0!InterfaceResultaatRonde communiceert het complexe resultaat van een spelronde.!!ResultaatRonde methodsFor: 'accessing' stamp: 'JackJanssen 12/8/2023 11:36'!spelduur	"retourneert het aantal seconden spelduur"	^ spelduur ! !!ResultaatRonde methodsFor: 'accessing' stamp: 'JackJanssen 12/8/2023 11:43'!puntenwinst 	"retourneert het aantal punten winst"	^ puntenwinst ! !!ResultaatRonde methodsFor: 'accessing' stamp: 'JackJanssen 2/23/2024 13:01'!aantalZetten: eenGetal	"zet de waarde van aantalZetten op een getal"	aantalZetten := eenGetal! !!ResultaatRonde methodsFor: 'accessing' stamp: 'JackJanssen 2/23/2024 13:01'!puntenwinst: eenGetal	"zet de waarde van puntenwinst op een getal"	puntenwinst := eenGetal! !!ResultaatRonde methodsFor: 'accessing' stamp: 'JackJanssen 2/23/2024 13:01'!spelduur: eenGetal	"zet de waarde van spelduur op een getal"	spelduur := eenGetal! !!ResultaatRonde methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 17:10'!aantalLevens	"retourneert het aantal levens dat de speler nog heeft"	^ aantalLevens ! !!ResultaatRonde methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 17:10'!aantalLevens: eenGetal	"zet het aantal levens dat de speler nog heeft"	aantalLevens := eenGetal .! !!ResultaatRonde methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 17:11'!aantalZetten	"retourneert het aantal zetten dat de speler heeft gedaan"	^ aantalZetten ! !!ResultaatRonde methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 17:12'!eindeBereikt	"retourneert of de speler het einde van het bord heeft bereikt (boolean). 'true'= einde is bereikt"	^ eindeBereikt ! !!ResultaatRonde methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 17:13'!eindeBereikt: eenBoolean	"zet de boolean die aangeeft of de speler het einde van het bord heeft bereikt"	eindeBereikt := eenBoolean ! !!ResultaatRonde methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 17:13'!overleden	"retourneert of de speler is overleden (boolean). 'true'= overleden"	^ overleden ! !!ResultaatRonde methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 17:14'!overleden: eenBoolean	"zet de boolean die aangeeft of de speler is overleden"	overleden := eenBoolean .! !!ResultaatRonde methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 17:15'!spelduurOverschreden 	"retourneert of de speler de maximale speelduur heeft overschreden (boolean). 'true'= maximale speelduur overschreden"	^ spelduurOverschreden .! !!ResultaatRonde methodsFor: 'accessing' stamp: 'JackJanssen 3/19/2024 17:16'!spelduurOverschreden: eenBoolean	"zet de boolean die aangeeft of de speler de maximale speelduur heeft overschreden"	spelduurOverschreden := eenBoolean .! !ModelMorph subclass: #Richtingkiezer	instanceVariableNames: 'omhoogButton omlaagButton linksButton rechtsButton'	classVariableNames: ''	package: 'Mijnen'!!Richtingkiezer commentStamp: 'JackJanssen 3/19/2024 17:35' prior: 0!Richtingkiezer is een samenstelsel van 4 richtingknoppen waarmee de speler kan worden verplaatst in een gewenste richting.Verantwoordelijkheden:- het instellen van de toegestane richtingen, zodanig dat alleen die richtingen kunnen worden gekozen- het disablen van de richtingknoppen onmiddellijk na het activeren van een knop- het doorgeven van de gekozen richting aan het hoofdscherm!!Richtingkiezer methodsFor: 'event handling' stamp: 'JackJanssen 3/19/2024 17:42'!zetLinks 	"disabled alle richtingen en geeft de actie door naar de owner"	self disableAlleRichtingen .	owner zetLinks .! !!Richtingkiezer methodsFor: 'event handling' stamp: 'JackJanssen 3/19/2024 17:42'!zetOmhoog	"disabled alle richtingen en geeft de actie door naar de owner"	self disableAlleRichtingen .	owner zetOmhoog.! !!Richtingkiezer methodsFor: 'event handling' stamp: 'JackJanssen 3/19/2024 17:42'!zetOmlaag 	"disabled alle richtingen en geeft de actie door naar de owner"	self disableAlleRichtingen .	owner zetOmlaag .! !!Richtingkiezer methodsFor: 'event handling' stamp: 'JackJanssen 3/19/2024 17:42'!zetRechts 	"isabled alle richtingen en geeft de actie door naar de owner"	self disableAlleRichtingen .	owner zetRechts .! !!Richtingkiezer methodsFor: 'ui dialogs' stamp: 'JackJanssen 3/19/2024 17:35'!disableAlleRichtingen 	"disabled alle 4 de richtingknoppen"	omhoogButton disable .	omlaagButton disable .	linksButton disable .	rechtsButton disable .! !!Richtingkiezer methodsFor: 'initialization' stamp: 'JackJanssen 3/19/2024 17:39'!initialize	"voeg de 4 richtingknoppen toe en bepaal hun posities. Elke knop krijgt een eigen afbeelding."	"Op dit moment staat die afbeelding nog op een vast plek. Dit moet nog relatief aan een actieve folder worden gemaakt."	| omhoogbuttonhoogte omhoogbuttonbreedte omlaagbuttonhoogte omlaagbuttonbreedte linksbuttonhoogte linksbuttonbreedte rechtsbuttonhoogte rechtsbuttonbreedte|	super initialize.	"self beResizeable ."	omhoogButton := RichtingKnop new.	omhoogButton labelGraphic: (Form fromFileNamed: '/home/jack/Pharo/workspace/Mijnen/PijlOp30x30.png').	omhoogButton target: self .	omhoogButton actionSelector: #zetOmhoog .	omhoogbuttonhoogte := omhoogButton height .	omhoogbuttonbreedte := omhoogButton width .	omlaagButton := RichtingKnop new.	omlaagButton labelGraphic: (Form fromFileNamed: '/home/jack/Pharo/workspace/Mijnen/PijlNeer30x30.png').	omlaagButton target: self .	omlaagButton actionSelector: #zetOmlaag .	omlaagbuttonhoogte := omlaagButton height .	omlaagbuttonbreedte := omlaagButton width .	linksButton := RichtingKnop new.	linksButton labelGraphic: (Form fromFileNamed: '/home/jack/Pharo/workspace/Mijnen/PijlLinks30x30.png').	linksButton target: self .	linksButton actionSelector: #zetLinks .	linksbuttonhoogte := linksButton height .	linksbuttonbreedte := linksButton width .	rechtsButton := RichtingKnop new.	rechtsButton labelGraphic: (Form fromFileNamed: '/home/jack/Pharo/workspace/Mijnen/PijlRechts30x30.png').	rechtsButton target: self .	rechtsButton actionSelector: #zetRechts  .	rechtsbuttonhoogte := rechtsButton height .	rechtsbuttonbreedte := rechtsButton width .	self bounds: (5 @ 5 extent: (linksbuttonbreedte + omlaagbuttonbreedte + rechtsbuttonbreedte + 11) @ (omlaagbuttonhoogte + rechtsbuttonhoogte + omlaagbuttonhoogte +11) ) .	omhoogButton bounds: ( (linksbuttonbreedte + 8) @ 5 extent: omhoogbuttonbreedte @ omhoogbuttonhoogte ).	self addMorph: omhoogButton .	omlaagButton bounds: ( (linksbuttonbreedte + 8)  @ (omhoogbuttonhoogte + linksbuttonhoogte + 11) extent: omlaagbuttonbreedte @ omlaagbuttonhoogte ).	self addMorph: omlaagButton .	linksButton bounds: ( 5 @ (omhoogbuttonhoogte + 8)  extent: linksbuttonbreedte  @ linksbuttonhoogte ).	self addMorph: linksButton .	rechtsButton bounds: ( (linksbuttonbreedte + omhoogbuttonbreedte + 11) @ (omhoogbuttonhoogte +8) extent: rechtsbuttonbreedte @ rechtsbuttonhoogte ).	self addMorph: rechtsButton .	omhoogButton disable . omlaagButton disable . linksButton disable . rechtsButton disable .! !!Richtingkiezer methodsFor: 'buttons behavior' stamp: 'JackJanssen 3/19/2024 17:41'!stelRichtingenIn: setRichtingen	"diabled of enabled de afzonderlijke richtingknoppen afhankelijk daarvan of hun richting voorkomt in de ingevoerde set richtingen"	| vr |	vr := Verplaatsingsrichting uniqueInstance .	(setRichtingen includes: (vr op)) ifTrue: [ omhoogButton enable] 		ifFalse: [ omhoogButton disable ].	(setRichtingen includes:  (vr neer)) ifTrue: [ omlaagButton enable] 		ifFalse: [ omlaagButton disable ].	(setRichtingen includes: (vr links)) ifTrue: [ linksButton enable] 		ifFalse: [ linksButton disable ].	(setRichtingen includes: (vr rechts)) ifTrue: [ rechtsButton enable] 		ifFalse: [ rechtsButton disable ].! !IconicButtonMorph subclass: #RichtingKnop	instanceVariableNames: 'enabled'	classVariableNames: ''	package: 'Mijnen'!!RichtingKnop commentStamp: 'JackJanssen 3/17/2024 15:56' prior: 0!Richtingknop is een knop in de richtingkiezer voor een van de mogelijke richtingenVerantwoordelijkheden- versturen van een bericht aan de richtingkiezer bij activering- kenbaar maken van het enabled/disabled zijn!!RichtingKnop methodsFor: 'protocol' stamp: 'JackJanssen 3/19/2024 17:24'!disable	"De enable-variabele wordt op false gezet en de knop wordt donker van kleur gemaakt"	enabled := false.	self color: Color darkGray .! !!RichtingKnop methodsFor: 'protocol' stamp: 'JackJanssen 3/19/2024 17:25'!enable	"De enable-variabele wordt op true gezet en de knop wordt licht van kleur gemaakt"	enabled := true.	self color: Color veryPaleRed .	! !!RichtingKnop methodsFor: 'mouse events' stamp: 'JackJanssen 3/19/2024 17:26'!handlesMouseOver: anEvent	"retourneert de waarde van de enable-variabele"	^ enabled ! !!RichtingKnop methodsFor: 'initialization' stamp: 'JackJanssen 3/19/2024 17:27'!initialize 	"de knop wordt initieell gemaakt in disablede toestand en met een donkere kleur"	super initialize .	enabled := false .	self color: Color darkGray .! !!RichtingKnop methodsFor: 'event handling' stamp: 'JackJanssen 3/19/2024 17:29'!handlesMouseDown: anEVent	"retourneert de waarde van de enable-variabele"	^ enabled ! !SystemWindow subclass: #Hoofdscherm	instanceVariableNames: 'speler controler totaleSpeelduur totaalAantalZetten totaalAantalPunten aantalLevens hetBord startButton endButton richtingkiezer deRonde'	classVariableNames: ''	package: 'Mijnen'!!Hoofdscherm commentStamp: 'JackJanssen 3/17/2024 15:45' prior: 0!Het hoofdscherm waarbinnen alle labels, knoppen en het speelbord zijn gedefinieerdVerantwoordelijkheden:- opbouwen van het scherm- delegeren van de schermacties naar de controler!!Hoofdscherm methodsFor: 'ui building' stamp: 'JackJanssen 3/17/2024 18:05'!bepaalAfmeting	"bepaalt de positionering van alle onderdelen van het scherm en de afmetingen van het hoofdscherm zelf"	"scope: vrijwel alle variabelen"	|spelerHoogte spelerBreedte duurHoogte duurBreedte zettenHoogte zettenBreedte puntenHoogte puntenBreedte levensHoogte levensBreedte bordHoogte bordBreedte startHoogte startBreedte endHoogte endBreedte kiezerHoogte kiezerBreedte rondeBreedte oorsprong |		spelerHoogte := speler height . spelerBreedte := speler width.	duurHoogte := totaleSpeelduur height .duurBreedte := totaleSpeelduur width .	zettenHoogte := totaalAantalZetten height . zettenBreedte := totaalAantalZetten width .	puntenHoogte := totaalAantalPunten height . puntenBreedte := totaalAantalPunten width .	levensHoogte := aantalLevens height . levensBreedte := aantalLevens width .	bordHoogte := hetBord height . bordBreedte := hetBord width .	startHoogte := startButton height . startBreedte := startButton width .	endHoogte := endButton height . endBreedte := endButton width .	kiezerHoogte := richtingkiezer height . kiezerBreedte := richtingkiezer width .	rondeBreedte := deRonde width.	oorsprong := self position + (5@30).	speler position: oorsprong .	totaleSpeelduur position: oorsprong + ((spelerBreedte + 5) @0).	totaalAantalZetten position: oorsprong + ((spelerBreedte + duurBreedte + 50) @0).	totaalAantalPunten position: oorsprong + ((spelerBreedte + 5) @(duurHoogte + 5)).	aantalLevens position: oorsprong + ((spelerBreedte + puntenBreedte + 50) @(duurHoogte + 5)).	hetBord position: oorsprong + (0 @(spelerHoogte +puntenHoogte + 35) ).	startButton position: hetBord position + ((bordBreedte + 10)@ 0).	richtingkiezer position: startButton position + (0@(startHoogte +10)).	endButton position: startButton position + (0@(startHoogte + kiezerHoogte +20)).	deRonde position: endButton  position + (0@(endHoogte + 10)).	self bounds: ( 0 @ 0 extent: ( (endButton position ) + ((({startBreedte . kiezerBreedte . endBreedte . rondeBreedte } max) + 50) @ bordHoogte  ) )).	! !!Hoofdscherm methodsFor: 'ui building' stamp: 'JackJanssen 3/17/2024 18:21'!zetBord: eenMorph	"voegt een morph toe als het bordonderdeel van het scherm"	"scope: hetBord"	hetBord := eenMorph .	self addMorph: eenMorph .! !!Hoofdscherm methodsFor: 'ui building' stamp: 'JackJanssen 3/17/2024 18:24'!zetEindKnop	"zet de endbutton op het scherm"	"scope: endbutton"	endButton := SchermKnop  newWithLabel: 'Beëindig ronde'.	endButton  target: self   .	endButton actionSelector: #beeindigRonde .	endButton disable .	self addMorph: endButton .! !!Hoofdscherm methodsFor: 'ui building' stamp: 'JackJanssen 3/17/2024 18:31'!zetResultaatZetten: zetten Punten: punten Duur: duur Levens: levens	"wijzigt de inhoud van een aantal schermvelden"	"scope: totaleSpeelduur, totaalAantalZetten, totaalAantalPunten, aantalLevens"	totaleSpeelduur zetVeldContent: (duur asString ).	totaalAantalZetten zetVeldContent: (zetten asString ).	totaalAantalPunten zetVeldContent: (punten asString ).	aantalLevens zetVeldContent: (levens asString ).	! !!Hoofdscherm methodsFor: 'ui building' stamp: 'JackJanssen 3/17/2024 18:33'!zetRichtingkiezer	"voeg een richtingkiezer toe aan het scherm"	"scope: richtingkiezer"	richtingkiezer := Richtingkiezer new.	self addMorph: richtingkiezer  .! !!Hoofdscherm methodsFor: 'ui building' stamp: 'JackJanssen 3/17/2024 18:33'!zetRonde: eenMorph	"voegt een ronde-onderdeel toe aan het scherm"	"scope: deRonde"	deRonde := eenMorph .	self addMorph: eenMorph .! !!Hoofdscherm methodsFor: 'ui building' stamp: 'JackJanssen 3/17/2024 18:34'!zetSpeler: eenString	"wijzigt de inhoud van de speler op het scherm"	"scope: speler"	|  |	speler zetVeldContent: eenString .! !!Hoofdscherm methodsFor: 'event handling' stamp: 'JackJanssen 3/17/2024 18:27'!zetOmhoog	"geeft de opdracht om naar omhoog te bewegen door aan de controler"	"scope: controler"		controler zetOmhoog .! !!Hoofdscherm methodsFor: 'event handling' stamp: 'JackJanssen 3/17/2024 18:28'!zetOmlaag	"geeft de opdracht om naar omlaag te bewegen door aan de controler"	"scope: controler"		controler zetOmlaag .! !!Hoofdscherm methodsFor: 'event handling' stamp: 'JackJanssen 3/17/2024 18:28'!zetRechts	"geeft de opdracht om naar rechts te bewegen door aan de controler"	"scope: controler"		controler zetRechts .! !!Hoofdscherm methodsFor: 'event handling' stamp: 'JackJanssen 3/17/2024 18:31'!zetLinks 	"geeft de opdracht om naar links te bewegen door aan de controler"	"scope: controler"	controler zetLinks .! !!Hoofdscherm methodsFor: 'action' stamp: 'JackJanssen 3/17/2024 18:03'!beeindigRonde	"Wordt geactiveerd door de endButton. De startButton wordt enabled en de endButton disabled, waarna de controle de ronde moet beëindigen"	"scope: startButton, endButton, controler"	startButton enable .	endButton disable .	controler beeindigRonde .! !!Hoofdscherm methodsFor: 'action' stamp: 'JackJanssen 3/17/2024 18:16'!speelNieuweRonde	"wordt geactiveerd door de startButton. De startButton wordt disabled en de endButton enabled. Daarna wordt de controler opgeroepen de nieuwe ronde te spelen"	"scope: startButton, endButton, controler"	startButton disable .	endButton enable .	controler speelNieuweRonde .! !!Hoofdscherm methodsFor: 'ui dialogs' stamp: 'JackJanssen 3/17/2024 18:09'!disableEindknop	"Voorkomt dat de endbutton kan worden geactiveerd wordt"	"scope: endButton"	endButton disable .! !!Hoofdscherm methodsFor: 'ui dialogs' stamp: 'JackJanssen 3/17/2024 18:10'!enableStartknop	"zorgt dat de startbutton geactiveerd kan worden"	"scope: startButton"	startButton enable .! !!Hoofdscherm methodsFor: 'ui dialogs' stamp: 'JackJanssen 3/17/2024 18:31'!disableAlleRichtingen	"Zorgt dat er geen richtingknop kan worden geactiveerd"	"scope: richtingkiezer"	richtingkiezer disableAlleRichtingen.! !!Hoofdscherm methodsFor: 'ui dialogs' stamp: 'JackJanssen 3/17/2024 18:35'!zetStartKnop	"zet een startButton op het scherm"	"scope: startButton"	startButton := SchermKnop  newWithLabel: 'Start nieuwe ronde'.	startButton target: self   .	startButton actionSelector: #speelNieuweRonde .	startButton enable .	self addMorph: startButton .! !!Hoofdscherm methodsFor: 'accessing' stamp: 'JackJanssen 3/17/2024 18:06'!controler: eenObject	"legt de controler vast"	"scope: controler"	controler := eenObject .! !!Hoofdscherm methodsFor: 'initialization' stamp: 'JackJanssen 3/17/2024 18:13'!initialize 	"Maak alle schermonderdelen die eigen zijn aan het hoofdscherm; dat is alles uitgezonderd het bord en het rondeonderdeel. Alles krijgt initiele vulling"	"scope: heel veel"	||	super initialize .	self setLabel: 'Mijnen'.	speler := VeldMetLabel maakMetLabel: 'Speler'.	speler zetVeldContent: 'onbekend'.	self addMorph: speler.	totaleSpeelduur := VeldMetLabel maakMetLabel:  'Totale speelduur:'.	totaleSpeelduur zetVeldContent: (0 asString).	self addMorph: totaleSpeelduur .		totaalAantalZetten := VeldMetLabel maakMetLabel: 'Totaal aantal zetten'.	totaalAantalZetten zetVeldContent: (0 asString).	self addMorph: totaalAantalZetten .	totaalAantalPunten := VeldMetLabel maakMetLabel: 'Totaal aantal punten:'.	totaalAantalPunten zetVeldContent: (0 asString).	self addMorph: totaalAantalPunten .	aantalLevens := VeldMetLabel maakMetLabel: 'Aantal levens:'.	aantalLevens zetVeldContent: (0 asString).	self addMorph: aantalLevens .	self zetStartKnop .	self zetEindKnop .	self zetRichtingkiezer .		! !!Hoofdscherm methodsFor: 'buttons behavior' stamp: 'JackJanssen 3/17/2024 18:20'!stelRichtingenIn: setRichtingen	"Geeft de richtingkiezer de opdracht de knoppen overeenkomstig een set richtingen te activeren"	"scope: richtingkiezer"	richtingkiezer stelRichtingenIn: setRichtingen .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Hoofdscherm class	instanceVariableNames: ''!!Hoofdscherm class commentStamp: '' prior: 0!Het hoofdscherm waarbinnen alle labels, knoppen en het speelbord zijn gedefinieerdVerantwoordelijkheden:- opbouwen van het scherm- delegeren van de schermacties naar de controler!!Hoofdscherm class methodsFor: 'creating' stamp: 'JackJanssen 3/17/2024 17:58'!maak: deControler	"maak een nieuw Hoofdscherm en leg daarin de controler vast"	"scope: controler"	| v |	v := self new.	v controler: deControler .	^ v.! !ModelMorph subclass: #VeldMetLabel	instanceVariableNames: 'veld'	classVariableNames: ''	package: 'Mijnen'!!VeldMetLabel commentStamp: 'JackJanssen 3/19/2024 20:06' prior: 0!Een VeldMetLabel is een samengestelde morph bestaande uit een string-morph die het vaste label bevat en een string-morph met de (wisselende) waarde.Verantwoordelijkheden:- het vullen van het label- het vullen van de waarde- het zetten van de achtergrondkleur van de waarde!!VeldMetLabel methodsFor: 'setting' stamp: 'JackJanssen 3/19/2024 20:11'!zetVeldContent: eenString	"Zet de contents van de veld-stringmorph op de ingevoerde string en past de eigen bounds daarop aan"		veld contents: eenString .	self bounds: (self position extent: (veld position + (veld width @ veld height))).! !!VeldMetLabel methodsFor: 'setting' stamp: 'JackJanssen 3/19/2024 20:12'!zetVeldKleur: eenKleur	"zet de achtergrondkleur van de veld-stringmorph op de ingevoerde waarde."	veld backgroundColor: eenKleur .! !!VeldMetLabel methodsFor: 'private - accessing' stamp: 'JackJanssen 3/19/2024 20:09'!veld: anObject	"geeft de veld-variabele de waarde van het ingevoerde object. N.B. veld wordt dus de verwijzing naar de stringmorph die wordt gebruikt voor het weergeven van de veldwaarde"	veld := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!VeldMetLabel class	instanceVariableNames: ''!!VeldMetLabel class commentStamp: '' prior: 0!Een VeldMetLabel is een samengestelde morph bestaande uit een string-morph die het vaste label bevat en een string-morph met de (wisselende) waarde.Verantwoordelijkheden:- het vullen van het label- het vullen van de waarde- het zetten van de achtergrondkleur van de waarde!!VeldMetLabel class methodsFor: 'creating' stamp: 'JackJanssen 3/19/2024 20:06'!maakMetLabel: hetLabel	"Voeg een Stringmorph toe voor het label en een tweede voor het veld. Geef het label de ingevoerde waarde. Bepaal hun onderlinge posities"	| v lbl vld|	v := self new.	lbl := StringMorph new.	lbl contents: hetLabel  .	vld := StringMorph new.	vld contents: ' ' .	v veld: vld.	v addMorph: lbl.	v addMorph: vld.	lbl position: (v position).	vld position: (lbl position + ((lbl width)@0)).	^ v.! !SimpleSwitchMorph subclass: #SchermVak	instanceVariableNames: ''	classVariableNames: ''	package: 'Mijnen'!!SchermVak commentStamp: 'JackJanssen 3/19/2024 18:15' prior: 0!Een SchermVak is 1 enkel vak uit het schermonderdeel voor het bordVeranwoordelijkheden:- wijzigen van kleur bij betreden!!SchermVak methodsFor: 'event handling' stamp: 'JackJanssen 3/19/2024 18:17'!handlesMouseDown: anEvent	"zorgt dat het vakje niet rechtstreeks kan worden aangeklikt"	^ false! !!SchermVak methodsFor: 'event handling' stamp: 'JackJanssen 3/19/2024 18:18'!handlesMouseOver: anEvent	"Zorgt dat het vakje niet reageert op muisbewegingen"	^ false! !!SchermVak methodsFor: 'accessing - computed' stamp: 'JackJanssen 3/19/2024 18:17'!geefMidden	"retourneert het eigen midpunt"	^ (self position + (((self width) / 2 )@ ((self height) / 2)))! !!SchermVak methodsFor: 'initialization' stamp: 'JackJanssen 3/19/2024 18:19'!initialize	"Zet de eigen toestandkleuren, afmetingen en zet zichzelf in de uit-stand "	super initialize.	self label: ''.	self borderWidth: 1.	bounds := 0 @ 0 corner: 30 @ 30.	offColor := Color paleYellow.	onColor := Color paleBlue darker .	self useSquareCorners .	self turnOff .! !Morph subclass: #SchermBord	instanceVariableNames: 'mannetje poort zebra vakkenraster aantalMijnen'	classVariableNames: ''	package: 'Mijnen'!!SchermBord commentStamp: 'JackJanssen 3/19/2024 17:47' prior: 0!Het SchermBord is het deel van het scherm waarop het bord wordt afgebeeld, d.w.z. de vakken, de speler en begin- en eindpuntVerantwoordelijkheden- het plaatsen van vakken op de gewenste positie- het correct positioneren van alle onderdelen op het scherm- het verplaatsen van de afbeelding van de speler- het tonen van het aantal mijnen grenzend aan de positie van de speler!!SchermBord methodsFor: 'ui building' stamp: 'JackJanssen 3/19/2024 17:55'!plaatsVak: eenMorph op: eenKolom bij: eenRij	"plaats een morph op de ingevoerde positie (kolom, rij) in het vakkenraster. Daarbij wordt de postie berekend relaties aan de oorsprong van het vakkenraster, aan de hand van de breedte en de hoogte van de morph."	| origin |	origin := vakkenraster  innerBounds origin.	vakkenraster  addMorph: eenMorph .	eenMorph position: ((eenKolom  - 1) * eenMorph width) @ ((eenRij  - 1) * eenMorph  height) + origin .! !!SchermBord methodsFor: 'ui building' stamp: 'JackJanssen 3/19/2024 18:01'!zetAfmeting: breedte bij: hoogte	"Zet de onderdelen van het bord op hun correcte positie"	| sampleCell width height origin|	sampleCell := SchermVak  new.	width := sampleCell width .	height := sampleCell height.	origin := self innerBounds  origin.	poort position: origin + (((breedte * width  - (poort width)) / 2 ) @ 0).	vakkenraster  bounds: ( (origin + (0@(poort height ))) extent: ( width * breedte  ) @ (height * hoogte  )  ).	zebra position: origin + (((breedte * width  - (zebra  width)) / 2 ) @ ((poort height) + (vakkenraster height)) ).	mannetje position: zebra position + (0@(zebra height )).	aantalMijnen position: vakkenraster position + (0@(vakkenraster height)).	self bounds: (origin extent: ((vakkenraster width)@((poort height) + (vakkenraster height) + (zebra height) + (mannetje height)) )).	! !!SchermBord methodsFor: 'ui process' stamp: 'JackJanssen 3/19/2024 17:57'!toonMijnen: eenGetal	"toont het ingevoerde getal in het veld voor aantal mijnen en zet de achtergrondkleur van dat veld als functie van dat getal."	aantalMijnen zetVeldContent: (eenGetal asString ).	(eenGetal = 0)		ifTrue: [ aantalMijnen zetVeldKleur: Color green  ] 		ifFalse: [ (eenGetal = 1) 			ifTrue: [ aantalMijnen zetVeldKleur: Color yellow  ] 			ifFalse: [ (eenGetal = 2) 				ifTrue: [ aantalMijnen zetVeldKleur: Color orange   ] 				ifFalse: [ aantalMijnen zetVeldKleur: Color red   ] ] ].! !!SchermBord methodsFor: 'ui process' stamp: 'JackJanssen 3/19/2024 17:58'!verplaatsMannetjeNaar: eenMorph	"verplaats de afbeeldeing van de speler naar de ingevoerde morph, zodanig dat het midden van het mannetje op het midden van de morph komt te liggen"		mannetje position: (eenMorph geefMidden + ((-1 * (mannetje width) / 2) @ (-1 * (mannetje height) / 2))) .! !!SchermBord methodsFor: 'ui process' stamp: 'JackJanssen 3/19/2024 17:59'!verplaatsMannetjeNaarIngang	"verplaats de afbeeldeing van de speler naar de afbeeldding van de zebra (die de ingang aangeeft)"	mannetje position: zebra position + (0@(zebra height )) .! !!SchermBord methodsFor: 'ui process' stamp: 'JackJanssen 3/19/2024 18:00'!verplaatsMannetjeNaarUitgang	"verplaats de afbeeldeing van de speler naar de afbeelding van de poort (die de uitgang aangeeft), zodanig dat het midden van het mannetje op het midden van de poort komt te liggen"	mannetje position: (poort  position + (((poort  width) / 2 )@ ((poort  height) / 2)) + ((-1 * (mannetje width) / 2) @ (-1 * (mannetje height) / 2))).! !!SchermBord methodsFor: 'initialization' stamp: 'JackJanssen 3/19/2024 17:51'!initialize	"Maak een raster waarop de vakken kunnen wowrden geplaatst en maak afbeeldingen voor de speler, het beginpunt en het eindpunt. Plaats een veld waarin het aantal mijnen kunnen worden getoond. "	"de afbeeldinge zijn nu nog afkomstig uit een gefixeerde locatie. Dit moet nog relatief worden gemaakt"		super initialize .	self color: Color veryVeryLightGray  .	vakkenraster := Morph new.	self addMorph: vakkenraster .	poort := ImageMorph new .	poort form: (Form fromFileNamed: '/home/jack/Pharo/workspace/Mijnen/boog.png') .	self addMorph: poort .	zebra := ImageMorph new .	zebra form: (Form fromFileNamed: '/home/jack/Pharo/workspace/Mijnen/zebrapad50x30.png') .	self addMorph: zebra .	mannetje := ImageMorph new .	mannetje form: (Form fromFileNamed: '/home/jack/Pharo/workspace/Mijnen/poppetje.png') .	self addMorph: mannetje .	aantalMijnen := VeldMetLabel maakMetLabel: 'Mijnen nabij'.	aantalMijnen zetVeldContent: (0 asString).	self addMorph: aantalMijnen .! !SimpleButtonMorph subclass: #SchermKnop	instanceVariableNames: 'enabled'	classVariableNames: ''	package: 'Mijnen'!!SchermKnop commentStamp: 'JackJanssen 3/19/2024 18:04' prior: 0!Een SchermKnop is een button die dynamisch kan worden enabled of disabledVerantwoordelijkheden:- disable / enable doorgeven aan het systeem- bij activering een bericht sturen!!SchermKnop methodsFor: 'protocol' stamp: 'JackJanssen 3/19/2024 18:04'!disable	"Zet de enabled-variabele op false"	enabled := false.! !!SchermKnop methodsFor: 'protocol' stamp: 'JackJanssen 3/19/2024 18:05'!enable	"zet de enabled variabele op true"	enabled := true.! !!SchermKnop methodsFor: 'event handling' stamp: 'JackJanssen 3/19/2024 18:05'!handlesMouseDown: anEvent	"retourneert de inhoud van de enabled-variabele"	^ enabled ! !!SchermKnop methodsFor: 'event handling' stamp: 'JackJanssen 3/19/2024 18:06'!handlesMouseOver: anEvent	"retourneert de inhoud van de enabled-variabele"	^ enabled ! !!SchermKnop methodsFor: 'initialization' stamp: 'JackJanssen 3/19/2024 18:07'!initialize 	"zet initieel de enabled-variabele op false"	super initialize .	enabled := false.! !Morph subclass: #SchermRonde	instanceVariableNames: 'aantalZetten aantalLevens punten spelduur nivonummer'	classVariableNames: ''	package: 'Mijnen'!!SchermRonde commentStamp: 'JackJanssen 3/19/2024 18:09' prior: 0!De SchermRonde is het schermonderdeel waarop de rondegegevens worden getoondVerantwoordelijkheden:- opzetten van dit schermonderdeel- tonen van de actuele stand van het spelnivo, het aantal zetten, aantal punten winst, aantal resterende levens en resterende speeltijd!!SchermRonde methodsFor: 'setting' stamp: 'JackJanssen 3/19/2024 18:12'!zetContentZetten: zetten Levens: levens Punten: dePunten Duur: duur	"Geef de velden voor aantal zetten, aantal levens, puntenwinst en speelduur de ingevoerde waarden"	aantalZetten zetVeldContent: (zetten asString ).	aantalLevens zetVeldContent: (levens asString ).	punten zetVeldContent: (dePunten asString ).	spelduur zetVeldContent: (duur asString ).! !!SchermRonde methodsFor: 'setting' stamp: 'JackJanssen 3/19/2024 18:13'!zetNivo: eenGetal	"Geef het veld voor het actuele nivo de ingevoerde waarde"	nivonummer zetVeldContent: (eenGetal asString ).! !!SchermRonde methodsFor: 'initialization' stamp: 'JackJanssen 3/19/2024 18:11'!initialize 	"Voeg de verschillende velden toe met hun labels en nog initiële waarde. Bepaal hun onderlinge posities"	|origin maxBreedte|	super initialize .	aantalZetten := VeldMetLabel maakMetLabel: 'Zetten deze ronde' .	aantalZetten zetVeldContent: (0 asString ).	aantalLevens := VeldMetLabel maakMetLabel: 'Aantal levens'. 	aantalLevens  zetVeldContent: (0 asString ).	punten := VeldMetLabel maakMetLabel: 'Puntenwinst' .	punten  zetVeldContent: (0 asString ).	spelduur := VeldMetLabel maakMetLabel: 'Spelduur resterend'.	spelduur  zetVeldContent: (0 asString ).	nivonummer := VeldMetLabel maakMetLabel: 'Spelnivo'.	nivonummer   zetVeldContent: (0 asString ).	self color: Color veryVeryLightGray .	self addMorph: aantalZetten .	self addMorph: aantalLevens .	self addMorph: punten .	self addMorph: spelduur .	self addMorph: nivonummer .	origin := self innerBounds origin.	spelduur position: origin .	aantalZetten position: (spelduur position) + (0@(spelduur height)) .	punten position: (aantalZetten  position) + (0@(aantalZetten  height)) .	aantalLevens  position: (punten  position) + (0@(punten  height)) .	nivonummer position: (aantalLevens position) + (0@(aantalLevens height) ) .	maxBreedte := { (spelduur width) . (aantalZetten width) . (punten width ) . (aantalLevens width) . (nivonummer width)} max .	self bounds: (origin extent: (maxBreedte @((spelduur  height) + (aantalZetten  height) + (punten  height) + (aantalLevens  height)) )).! !Object subclass: #Klok	instanceVariableNames: 'startTijd'	classVariableNames: ''	package: 'Mijnen'!!Klok commentStamp: 'JackJanssen 3/17/2024 15:46' prior: 0!De klok is het middel om de tijd die verloopt tijdens het spelen bij te houden.Verantwoordelijkheden:- registreren van de begintijd van een spelronde- bijhouden van de tijd die is verstreken sinds het begin van de ronde!!Klok methodsFor: 'setting' stamp: 'JackJanssen 3/19/2024 16:32'!geefVerlopenTijd	"Retourneert de tijd in seconden die is verlopen sinds de vastgelegde startTijd"	| nu |	nu := Time now.	^ (nu subtractTime:  startTijd) asSeconds! !!Klok methodsFor: 'setting' stamp: 'JackJanssen 3/19/2024 16:33'!registreerTijd	"Leg het actuele tijdstip vast als de startTijd"	startTijd := Time now.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Klok class	instanceVariableNames: 'uniqueInstance'!!Klok class commentStamp: '' prior: 0!De klok is het middel om de tijd die verloopt tijdens het spelen bij te houden.Verantwoordelijkheden:- registreren van de begintijd van een spelronde- bijhouden van de tijd die is verstreken sinds het begin van de ronde!!Klok class methodsFor: 'instance creation' stamp: 'JackJanssen 2/26/2024 16:17'!uniqueInstance 	"comment stating purpose of class-side method"	"scope: class-variables  &  class-instance-variables"	uniqueInstance ifNil: [ uniqueInstance := self new ].	^ uniqueInstance ! !